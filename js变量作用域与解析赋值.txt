一、函数变量
函数里的变量是局部变量,所有外部无法调用
	如:
	'use strict';

	function foo() {
	    var x = 1;
	    x = x + 1;
	}

	x = x + 2; // ReferenceError! 无法在函数体外引用变量x

每个函数里的变量是相互独立的,所以不同的函数使用相同的变量是完全没问题的.
	'use strict';

	function foo() {
	    var x = 1;
	    x = x + 1;
	}

	function bar() {
	    var x = 'A';
	    x = x + 'B';
	}

函数可以嵌套,所以内部函数能访问外部函数,外部函数不可访问内部函数.
即最外层的函数是个整体,而里面的函数则可以调用最外层函数里面的变量,反过来就不行了.
通俗讲:无私的爸爸允许你使用,而自私的儿子不让你用!

	'use strict';

	function foo() {
	    var x = 1;
	    function bar() {
	        var y = x + 1; // bar可以访问foo的变量x!
	    }
	    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!
	}

如果内部函数与外部函数重合了,那么内部的是内部的,外部的是外部的.内部的函数向"屏蔽"外部的函数
即从"内"向"外"查找
	function foo() {
	    var x = 1;
	    function bar() {
	        var x = 'A';
	        console.log('x in bar() = ' + x); // 'A'
	    }
	    console.log('x in foo() = ' + x); // 1
	    bar();
	}

	foo();
	
	结果:
		x in foo() = 1
		x in bar() = A

二、变量提升
JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：
不过js有一个怪异特性,所以即便变量提升,但在定义时,还请优先将变量全部定义

	'use strict';

	function foo() {
	    var x = 'Hello, ' + y;
	    console.log(x);
	    var y = 'Bob';
	}

	foo();

虽然是strict模式，但语句var x = 'Hello, ' + y;并不报错，原因是变量y在稍后申明了。但是console.log显示Hello, undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。

对于上述foo()函数，JavaScript引擎看到的代码相当于：

	function foo() {
	    var y; // 提升变量y的申明，此时y为undefined
	    var x = 'Hello, ' + y;
	    console.log(x);
	    y = 'Bob';
	}

由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：
	function foo() {
	    var
	        x = 1, // x初始化为1
	        y = x + 1, // y初始化为2
	        z, i; // z和i为undefined
	    // 其他语句:
	    for (i=0; i<100; i++) {
	        ...
	    }
	}

三、全局作用域
	不在任何函数内定义的变量就具有全局作用域。
实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：

	'use strict';

	var course = 'Learn JavaScript';
	alert(course); // 'Learn JavaScript'
	alert(window.course); // 'Learn JavaScript'

因此，直接访问全局变量course和访问window.course是完全一样的。
由于window能省略，所以window就经常被省略掉。
你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：
	'use strict';

	function foo() {
	    alert('foo');
	}

	foo(); // 直接调用foo()
	window.foo(); // 通过window.foo()调用

进一步大胆地猜测，我们每次直接调用的alert()函数其实也是window的一个变量：

	'use strict';

	window.alert('调用window.alert()');
	// 把alert保存到另一个变量:
	var old_alert = window.alert;
	// 给alert赋一个新函数:
	window.alert = function () {}

	alert('无法用alert()显示了!');

	// 恢复alert:
	window.alert = old_alert;
	alert('又可以用alert()了!');

	思路：尝试调用window.alert()
	好使后，给window.alert赋予个空函数再调用
	就不好使了！
	想恢复，就在给window.alert赋予原值

这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。

四、名字空间
全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。

减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

	// 唯一的全局变量MYAPP:
	var MYAPP = {};

	// 其他变量:
	MYAPP.name = 'myapp';
	MYAPP.version = 1.0;

	// 其他函数:
	MYAPP.foo = function () {
	    return 'foo';
	};

把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。
许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。

五、变量作用域与解构赋值
阅读: 159080
在JavaScript中，用var申明的变量实际上是有作用域的。

如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：

'use strict';

function foo() {
    var x = 1;
    x = x + 1;
}

x = x + 2; // ReferenceError! 无法在函数体外引用变量x
如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：

'use strict';

function foo() {
    var x = 1;
    x = x + 1;
}

function bar() {
    var x = 'A';
    x = x + 'B';
}
由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：

'use strict';

function foo() {
    var x = 1;
    function bar() {
        var y = x + 1; // bar可以访问foo的变量x!
    }
    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!
}
如果内部函数和外部函数的变量名重名怎么办？来测试一下：

'use strict';

function foo() {
    var x = 1;
    function bar() {
        var x = 'A';
        console.log('x in bar() = ' + x); // 'A'
    }
    console.log('x in foo() = ' + x); // 1
    bar();
}

foo();

 Run
x in foo() = 1
x in bar() = A
这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。

变量提升
JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：

'use strict';

function foo() {
    var x = 'Hello, ' + y;
    console.log(x);
    var y = 'Bob';
}

foo();
虽然是strict模式，但语句var x = 'Hello, ' + y;并不报错，原因是变量y在稍后申明了。但是console.log显示Hello, undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。

对于上述foo()函数，JavaScript引擎看到的代码相当于：

function foo() {
    var y; // 提升变量y的申明，此时y为undefined
    var x = 'Hello, ' + y;
    console.log(x);
    y = 'Bob';
}
由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：

function foo() {
    var
        x = 1, // x初始化为1
        y = x + 1, // y初始化为2
        z, i; // z和i为undefined
    // 其他语句:
    for (i=0; i<100; i++) {
        ...
    }
}
全局作用域
不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：

'use strict';

var course = 'Learn JavaScript';
alert(course); // 'Learn JavaScript'
alert(window.course); // 'Learn JavaScript'
因此，直接访问全局变量course和访问window.course是完全一样的。

你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：

'use strict';

function foo() {
    alert('foo');
}

foo(); // 直接调用foo()
window.foo(); // 通过window.foo()调用
进一步大胆地猜测，我们每次直接调用的alert()函数其实也是window的一个变量：

'use strict';

window.alert('调用window.alert()');
// 把alert保存到另一个变量:
var old_alert = window.alert;
// 给alert赋一个新函数:
window.alert = function () {}

alert('无法用alert()显示了!');

// 恢复alert:
window.alert = old_alert;
alert('又可以用alert()了!');
 Run
(no output)
这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。

名字空间
全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。

减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

// 唯一的全局变量MYAPP:
var MYAPP = {};

// 其他变量:
MYAPP.name = 'myapp';
MYAPP.version = 1.0;

// 其他函数:
MYAPP.foo = function () {
    return 'foo';
};
把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。

许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。

五、局部作用域
由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：

	'use strict';

	function foo() {
	    for (var i=0; i<100; i++) {
	        //
	    }
	    i += 100; // 仍然可以引用变量i
	}

为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：
	'use strict';

	function foo() {
	    var sum = 0;
 	   for (let i=0; i<100; i++) {
 	       sum += i;
 	   }
 	   // SyntaxError:无法错误
	    i += 1;  //将无法使用
	}

六、常量
由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：
	var PI = 3.14;
ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：
	'use strict';

	const PI = 3.14;
	PI = 3; // 某些浏览器不报错，但是无效果！
	PI; // 3.14


七、解构赋值
从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。

什么是解构赋值？我们先看看传统的做法，如何把一个数组的元素分别赋值给几个变量：

	var array = ['hello', 'JavaScript', 'ES6'];
	var x = array[0];
	var y = array[1];
	var z = array[2];

现在，在ES6中，可以使用解构赋值，直接对多个变量同时赋值：
	'use strict';

	// 如果浏览器支持解构赋值就不会报错:
	var [x, y, z] = ['hello', 'JavaScript', 'ES6'];
	// x, y, z分别被赋值为数组对应元素:
	console.log('x = ' + x + ', y = ' + y + ', z = ' + z);

	结果：
	x = hello, y = JavaScript, z = ES6

变量作用域与解构赋值
阅读: 159080
在JavaScript中，用var申明的变量实际上是有作用域的。

如果一个变量在函数体内部申明，则该变量的作用域为整个函数体，在函数体外不可引用该变量：

'use strict';

function foo() {
    var x = 1;
    x = x + 1;
}

x = x + 2; // ReferenceError! 无法在函数体外引用变量x
如果两个不同的函数各自申明了同一个变量，那么该变量只在各自的函数体内起作用。换句话说，不同函数内部的同名变量互相独立，互不影响：

'use strict';

function foo() {
    var x = 1;
    x = x + 1;
}

function bar() {
    var x = 'A';
    x = x + 'B';
}
由于JavaScript的函数可以嵌套，此时，内部函数可以访问外部函数定义的变量，反过来则不行：

'use strict';

function foo() {
    var x = 1;
    function bar() {
        var y = x + 1; // bar可以访问foo的变量x!
    }
    var z = y + 1; // ReferenceError! foo不可以访问bar的变量y!
}
如果内部函数和外部函数的变量名重名怎么办？来测试一下：

'use strict';

function foo() {
    var x = 1;
    function bar() {
        var x = 'A';
        console.log('x in bar() = ' + x); // 'A'
    }
    console.log('x in foo() = ' + x); // 1
    bar();
}

foo();

 Run
x in foo() = 1
x in bar() = A
这说明JavaScript的函数在查找变量时从自身函数定义开始，从“内”向“外”查找。如果内部函数定义了与外部函数重名的变量，则内部函数的变量将“屏蔽”外部函数的变量。

变量提升
JavaScript的函数定义有个特点，它会先扫描整个函数体的语句，把所有申明的变量“提升”到函数顶部：

'use strict';

function foo() {
    var x = 'Hello, ' + y;
    console.log(x);
    var y = 'Bob';
}

foo();
虽然是strict模式，但语句var x = 'Hello, ' + y;并不报错，原因是变量y在稍后申明了。但是console.log显示Hello, undefined，说明变量y的值为undefined。这正是因为JavaScript引擎自动提升了变量y的声明，但不会提升变量y的赋值。

对于上述foo()函数，JavaScript引擎看到的代码相当于：

function foo() {
    var y; // 提升变量y的申明，此时y为undefined
    var x = 'Hello, ' + y;
    console.log(x);
    y = 'Bob';
}
由于JavaScript的这一怪异的“特性”，我们在函数内部定义变量时，请严格遵守“在函数内部首先申明所有变量”这一规则。最常见的做法是用一个var申明函数内部用到的所有变量：

function foo() {
    var
        x = 1, // x初始化为1
        y = x + 1, // y初始化为2
        z, i; // z和i为undefined
    // 其他语句:
    for (i=0; i<100; i++) {
        ...
    }
}
全局作用域
不在任何函数内定义的变量就具有全局作用域。实际上，JavaScript默认有一个全局对象window，全局作用域的变量实际上被绑定到window的一个属性：

'use strict';

var course = 'Learn JavaScript';
alert(course); // 'Learn JavaScript'
alert(window.course); // 'Learn JavaScript'
因此，直接访问全局变量course和访问window.course是完全一样的。

你可能猜到了，由于函数定义有两种方式，以变量方式var foo = function () {}定义的函数实际上也是一个全局变量，因此，顶层函数的定义也被视为一个全局变量，并绑定到window对象：

'use strict';

function foo() {
    alert('foo');
}

foo(); // 直接调用foo()
window.foo(); // 通过window.foo()调用
进一步大胆地猜测，我们每次直接调用的alert()函数其实也是window的一个变量：

'use strict';

window.alert('调用window.alert()');
// 把alert保存到另一个变量:
var old_alert = window.alert;
// 给alert赋一个新函数:
window.alert = function () {}

alert('无法用alert()显示了!');

// 恢复alert:
window.alert = old_alert;
alert('又可以用alert()了!');
 Run
(no output)
这说明JavaScript实际上只有一个全局作用域。任何变量（函数也视为变量），如果没有在当前函数作用域中找到，就会继续往上查找，最后如果在全局作用域中也没有找到，则报ReferenceError错误。

名字空间
全局变量会绑定到window上，不同的JavaScript文件如果使用了相同的全局变量，或者定义了相同名字的顶层函数，都会造成命名冲突，并且很难被发现。

减少冲突的一个方法是把自己的所有变量和函数全部绑定到一个全局变量中。例如：

// 唯一的全局变量MYAPP:
var MYAPP = {};

// 其他变量:
MYAPP.name = 'myapp';
MYAPP.version = 1.0;

// 其他函数:
MYAPP.foo = function () {
    return 'foo';
};
把自己的代码全部放入唯一的名字空间MYAPP中，会大大减少全局变量冲突的可能。

许多著名的JavaScript库都是这么干的：jQuery，YUI，underscore等等。

局部作用域
由于JavaScript的变量作用域实际上是函数内部，我们在for循环等语句块中是无法定义具有局部作用域的变量的：

'use strict';

function foo() {
    for (var i=0; i<100; i++) {
        //
    }
    i += 100; // 仍然可以引用变量i
}
为了解决块级作用域，ES6引入了新的关键字let，用let替代var可以申明一个块级作用域的变量：

'use strict';

function foo() {
    var sum = 0;
    for (let i=0; i<100; i++) {
        sum += i;
    }
    // SyntaxError:
    i += 1;
}
	@_@理解
		这里多了个let定义类
		不可重复使用
常量
由于var和let申明的是变量，如果要申明一个常量，在ES6之前是不行的，我们通常用全部大写的变量来表示“这是一个常量，不要修改它的值”：

var PI = 3.14;
ES6标准引入了新的关键字const来定义常量，const与let都具有块级作用域：

'use strict';

const PI = 3.14;
PI = 3; // 某些浏览器不报错，但是无效果！
PI; // 3.14

	@_@理解
		这里多了个'const'这个定义类

解构赋值
从ES6开始，JavaScript引入了解构赋值，可以同时对一组变量进行赋值。

什么是解构赋值？我们先看看传统的做法，如何把一个数组的元素分别赋值给几个变量：

var array = ['hello', 'JavaScript', 'ES6'];
var x = array[0];
var y = array[1];
var z = array[2];
现在，在ES6中，可以使用解构赋值，直接对多个变量同时赋值：

	'use strict';

	// 如果浏览器支持解构赋值就不会报错:
	var [x, y, z] = ['hello', 'JavaScript', 'ES6'];

	// x, y, z分别被赋值为数组对应元素:
	console.log('x = ' + x + ', y = ' + y + ', z = ' + z);

	结果：
	x = hello, y = JavaScript, z = ES6

	@_@理解:
		你就理解成按座位赋值吧!

注意，对数组元素进行解构赋值时，多个变量要用[...]括起来。
如果数组本身还有嵌套，也可以通过下面的形式进行解构赋值，注意嵌套层次和位置要保持一致：

	let [x, [y, z]] = ['hello', ['JavaScript', 'ES6']];
	x; // 'hello'
	y; // 'JavaScript'
	z; // 'ES6'

解构赋值还可以忽略某些元素：
	let [, , z] = ['hello', 'JavaScript', 'ES6']; // 忽略前两个元素，只对z赋值第三个元素
	z; // 'ES6'

	@_@理解:
		好像let和var没有太大的区别?在不重复使用的情况下

如果需要从一个对象中取出若干属性，也可以使用解构赋值，便于快速获取对象的指定属性：
	'use strict';

	var person = {
	    name: '小明',
	    age: 20,
	    gender: 'male',
	    passport: 'G-12345678',
	    school: 'No.4 middle school'
	};
	var {name, age, passport} = person;
	// name, age, passport分别被赋值为对应属性:
	console.log('name = ' + name + ', age = ' + age + ', passport = ' + passport);

	结果：
	name = 小明, age = 20, passport = G-12345678

	@_@理解:
		因为只定义了三个,所以在对象中没被提及的'名'自然就没有了'值';
		注意！因为定义的只有前三个变量，所以第四个变量不能输出。

对一个对象进行解构赋值时，同样可以直接对嵌套的对象属性进行赋值，只要保证对应的层次是一致的：

	var person = {
	    name: '小明',
	    age: 20,
	    gender: 'male',
	    passport: 'G-12345678',
	    school: 'No.4 middle school',
	    address: {
	        city: 'Beijing',
	        street: 'No.1 Road',
 	       zipcode: '100001'
	    }
	};
	var {name, address: {city, zip}} = person;
	name; // '小明'
	city; // 'Beijing'
	zip; // undefined, 因为属性名是zipcode而不是zip
	// 注意: address不是变量，而是为了让city和zip获得嵌套的address对象的属性:
	address; // Uncaught ReferenceError: address is not defined

	@_@理解:
		因为对象里没有zip这个值,所以自然就显示undefined了

使用解构赋值对对象属性进行赋值时，如果对应的属性不存在，变量将被赋值为undefined，这和引用一个不存在的属性获得undefined是一致的。如果要使用的变量名和属性名不一致，可以用下面的语法获取：

	var person = {
	    name: '小明',
	    age: 20,
	    gender: 'male',
	    passport: 'G-12345678',
	    school: 'No.4 middle school'
	};

	// 把passport属性赋值给变量id: [这是换了个变量名啊！]
	let {name, passport:id} = person;
	name; // '小明'
	id; // 'G-12345678'
	// 注意: passport不是变量，而是为了让变量id获得passport属性:
	passport; // Uncaught ReferenceError: passport is not defined

	@_@理解:
		把passport改成了id

解构赋值还可以使用默认值，这样就避免了不存在的属性返回undefined的问题：

	var person = {
	    name: '小明',
	    age: 20,
	    gender: 'male',
 	   passport: 'G-12345678'
	};

	// 如果person对象没有single属性，默认赋值为true: [这是给没有的变量加个值啊！]
	var {name, single=true} = person;
	name; // '小明'
	single; // true

	@_@理解：
		因为person对象中没有single，所以就给赋值一个true
		事实上，'single=true'这也是一种默认参数的赋值法

有些时候，如果变量已经被声明了，再次赋值的时候，正确的写法也会报语法错误：

	// 声明变量:
	var x, y;
	// 解构赋值:
	{x, y} = { name: '小明', x: 100, y: 200};
	// 语法错误: Uncaught SyntaxError: Unexpected token =

		这是因为JavaScript引擎把{开头的语句当作了块处理，于是=不再合法。解决方法是用小括号括起来：

		({x, y} = { name: '小明', x: 100, y: 200});

八、使用场景
解构赋值在很多时候可以大大简化代码。例如，交换两个变量x和y的值，可以这么写，不再需要临时变量：
	var x=1, y=2;
	[x, y] = [y, x]
快速获取当前页面的域名和路径：
	var {hostname:domain, pathname:path} = location;

	输出
	console.log(domain); //空白
 	console.log(path);	//路径
 	console.log(location.hostname);	//空白
 	console.log(location.path);	//undefined

	@_@理解
		就当冒号（：）后面的名词为新改的变量名吧！



如果一个函数接收一个对象作为参数，那么，可以使用解构直接把对象的属性绑定到变量中。例如，下面的函数可以快速创建一个Date对象：
	
	function buildDate({year, month, day, hour=0, minute=0, second=0}) {
   	 return new Date(year + '-' + month + '-' + day + ' ' + hour + ':' + minute + ':' + second);
	}

	调用
	buildDate({ year: 2017, month: 1, day: 1 });
	buildDate({ year: 2017, month: 1, day: 1, hour: 20, minute: 15 });

	@_@理解:原函数采用的是[解构赋值]的单一形参,所以在调用是,也必须一一对应
		可理解成对象的赋值,而没有前缀是无法被识别的
		而形参中的"hour=0, minute=0, second=0"这些,则是作为默认参数,如果不赋值也不会错.
		但其他的就不行了.